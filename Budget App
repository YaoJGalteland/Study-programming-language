
import math

class Category:
    def __init__(self, name):
        self.name = name
        self.ledger = list()

    def deposit(self, amount, description = ''):
        self.ledger.append({"amount": amount, "description": description})

    def withdraw(self, amount, description = ''): # store the amount as a negative number
        if self.check_funds(amount):
            self.ledger.append(({"amount": - amount, "description": description}))
            return True
        else:
            return False

    # return the current balance of the budget category based on the deposits and withdrawals that have occurred
    def get_balance(self):
        balence = 0
        for expense in self.ledger:
            balence = balence + expense["amount"]
        return balence

    # return the amount be spent
    def get_spend(self):
        spend = 0
        for expense in self.ledger:
            if expense['amount'] < 0:
                spend = spend - expense['amount']
        return spend

    # transfer the amount from self to category
    def transfer(self, amount, category):
        if self.check_funds(amount):
            self.withdraw(amount, "Transfer to {}".format(category.name))
            category.deposit(amount, "Transfer from {}".format(self.name))
            return True
        else:
            return False

    def check_funds(self, amount):
        if amount > self.get_balance():
            return False
        return True

    # print the budget object
    def __str__(self):
        title = '{:*^30}\n'.format(self.name)
       # title = f"{self.name:*^30}\n"
        items = ""
        total = 0
        for i in range(len(self.ledger)):
            items += '{:23}'.format(self.ledger[i]['description'][0:23]) + '{:7.2f}'.format(self.ledger[i]['amount']) + '\n'
            total += self.ledger[i]['amount']
        output = title + items + "Total: " + str(total)
        return output

# create a chart to compare the spend
def create_spend_chart(categories):
    Category.number_of_categories = len(categories)
    percentage = list()

    if Category.number_of_categories > 4:
        return 0

    result = 'Percentage spent by category'

    names = list()
    for category in categories:
        names.append(len(category.name))
    name_max = max(name for name in names)  # the max length of all categories' names

    total = 0
    for category in categories:
        category.name = category.name + ' ' * name_max
        total += category.get_spend()   # the total spend of all categories

    for category in categories:
        percentage.append(math.floor((category.get_spend() / total) * 10) )  

    for i in range(10, -1, -1):
        if i == 10:
            result = result + '\n100| '
        elif i == 0:
            result = result + '\n  0| '
        else:
            result = result + '\n {}0| '.format(i)
        for j in range(Category.number_of_categories):
            if percentage[j] >= i:
                result = result + 'o  '
            else:
                result = result + '   '
    result += '\n    '
    result = result + '-' * (1 + 3 * Category.number_of_categories)

    for i in range(name_max):
        result = result + '\n     '
        for category in categories:
            result = result + '{}  '.format(category.name[i])
    return result
