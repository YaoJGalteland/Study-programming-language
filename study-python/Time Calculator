# Write a function named add_time that takes in two required parameters and one optional parameter:
# a start time in the 12-hour clock format (ending in AM or PM)
# a duration time that indicates the number of hours and minutes
# (optional) a starting day of the week, case insensitive

def add_time(start, duration, date = 0):  # optional input for date
    index = int()
    date_index = int()

    if 'AM' in start:
        index = 0
    else:
        index = 1


    dict_week = {
        'sunday' : 0,
        'monday' : 1,
        'tuesday' : 2,
        'wednesday' : 3,
        'thursday' : 4,
        'friday' : 5,
        'saturday' : 6
    }

    reverse_dict_week = {
        0 : 'Sunday',
        1 : 'Monday',
        2 : 'Tuesday',
        3 : 'Wednesday',
        4 : 'Thursday',
        5 : 'Friday',
        6 : 'Saturday'
    }

    start = start.split(':')
    start_hour = int(start[0])
    start_minute = int(start[1][0:3])

    duration = duration.split(':')
    duration_hour = int(duration[0])
    duration_minute = int(duration[1])


    new_time_minute = (start_minute + duration_minute) % 60
    if new_time_minute < 10:
        new_time_minute = '0' + str(new_time_minute)
    new_time_hour = (start_hour + duration_hour + int((start_minute + duration_minute) / 60)) % 12
    if new_time_hour == 0:
        new_time_hour = 12

    duration_halfday = int((start_hour + duration_hour + int((start_minute + duration_minute) / 60)) / 12)
    new_time_halfday = index + duration_halfday
    new_time_day = int((index + duration_halfday) / 2)  # compute how many days later

# find the new_time is AM or PM
    if new_time_halfday % 2 == 0:
        am_or_pm = 'AM'
    else:
        am_or_pm = 'PM'

    if date == 0:   # output the new time without the date
        if new_time_day == 0:
            new_time = '{}:{} {}'.format(new_time_hour, new_time_minute, am_or_pm)
        elif new_time_day == 1:
            new_time = '{}:{} {} {}'.format(new_time_hour, new_time_minute, am_or_pm, '(next day)')
        else:
            new_time = '{}:{} {} ({} days later)'.format(new_time_hour, new_time_minute, am_or_pm,
                                                             new_time_day)
    else:    # output the new time with the date
        date_index = (dict_week[date.lower()] + new_time_day) % 7
        new_time_date = reverse_dict_week[date_index]
        if new_time_day == 0:
            new_time = '{}:{} {}, {}'.format(new_time_hour, new_time_minute, am_or_pm, new_time_date)
        elif new_time_day == 1:
            new_time = '{}:{} {}, {} {}'.format(new_time_hour, new_time_minute, am_or_pm, new_time_date, '(next day)')
        else:
            new_time = '{}:{} {}, {} ({} days later)'.format(new_time_hour, new_time_minute, am_or_pm, new_time_date, new_time_day)

    return new_time
    
    
